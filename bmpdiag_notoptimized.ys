#------------------------------------------------------------------
# 
#  4190.308 Computer Architecture (Spring 2019)
#
#  Project #4: Optimizing Program for a Pipelined Y86-64 Processor
#
#  May 28, 2019
#
#  Jin-Soo Kim (jinsoo.kim@snu.ac.kr)
#  Systems Software & Architecture Laboratory
#  Dept. of Computer Science and Engineering
#  Seoul National University
#
#------------------------------------------------------------------

bmp_diag:
  # imgptr is in %rdi
  # width  is in %rsi
  # height is in %rdx
  # gap    is in %rcx
  #-----------------------------------------------------------------

  # FILL HERE
  # You are allowed to use any register supported by Y86-64 architecture
  
  # immediate values : %r12, %r13, %r14

  # Find padding : %rax
  irmovq  $3, %r12
  rrmovq  %rsi, %r11
  rrmovq  %rsi, %rax
  mulq    %r12, %r11
  irmovq  $255, %r14
  irmovq  $0, %r13 
  andq    %r12, %rax 
  rrmovq  %r11, %r10
  rrmovq  %rcx, %rbx
  addq    %rax, %r11
  rrmovq  %rdx, %rax
  # Find first two red points : %rax, %rbx
  iaddq   $-1, %rax 
  rrmovq  %rax, %r9
  divq    %rcx, %r9
  mulq    %rcx, %r9
  mulq    %r12, %rcx
  subq    %r9, %rax
  subq    %rax, %rbx
  mulq    %r12, %rax 
  mulq    %r12, %rbx
  addq	  %rdi, %rax # X1 memory address in rax  
  addq	  %rdi, %rbx # X2 memory address in rbx
  rrmovq  %rcx, %rbp
  rrmovq  %rax, %r12
  rrmovq  %rbx, %rsi
  addq    %rdi, %rbp


ColorP:
  CheckX1:
    subq    %rdi, %r12
    jge	    CheckX2
  
  ResetX1:
    addq    %rcx, %rax

  CheckX2:
    subq    %rbp, %rsi
    jl     JustP

  ResetX2:
    rrmovq  %rdi, %rbx

JustP:
  # Store end of line
  rrmovq  %r10, %rbp
  rrmovq  %rax, %r8
  rrmovq  %rbx, %r9 
# Color X1, X2
  rmmovb  %r13, (%rax)
  rmmovb  %r13, 1(%rax)
  rmmovb  %r14, 2(%rax)
  addq    %rdi, %rbp
  addq	  %rcx, %r8
  addq    %rcx, %r9
  rmmovb  %r13, (%rbx)
  rmmovb  %r13, 1(%rbx)
  rmmovb  %r14, 2(%rbx)

# %rax = X1			%r8 = X1'
# %rbx = X2			%r9 = X2'
# %rcx = gap			%r10 = 3w
# %rdx = height			%r11 = 3w + pad
# %rsi = weight			%r12 = 3
# %rdi = ptr(0,H-1)		%r13 = 0
# %rbp				    %r14 = 255
# %rsp  

JustLoop:
  rrmovq  %rbp, %rsi
  rrmovq  %rbp, %r12
  rmmovb  %r13, (%r8)
  rmmovb  %r13, 1(%r8)
  rmmovb  %r14, 2(%r8)
  addq	  %rcx, %r8 
  rmmovb  %r13, (%r9)
  rmmovb  %r13, 1(%r9)
  rmmovb  %r14, 2(%r9)
  addq    %rcx, %r9

CheckX2i:
  subq    %r8, %rsi
  jg CheckX1i

ResetX2i:
  subq    %rcx, %r8
  subq    %r9, %r12
  jg      JustLoop
  jmp     CheckEnd

CheckX1i:
  subq    %r9, %r12
  jg      JustLoop

ResetX2i:
  subq    %rcx, %r9
  jmp     JustLoop
  

CheckEnd:
  iaddq	  $-1, %rdx
  jg	  IncPoint
  ret

IncPoint:
  rrmovq  %rcx, %rbp
  addq    %r11, %rdi
  addq    %r11, %rax
  addq    %r11, %rbx
  iaddq   $-3, %rax
  addq    %rdi, %rbp
  rrmovq  %rax, %r12
  iaddq   $3, %rbx
  rrmovq  %rbx, %rsi
  jmp     ColorP

